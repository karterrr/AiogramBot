from datetime import datetime

from aiogram import F, Router, BaseMiddleware, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from typing import Callable, Awaitable, Dict
import aiosqlite

import app.keyboard as kb
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤
ADMIN_IDS = [307464344]

class AdminCheckMiddleware(BaseMiddleware):
    async def __call__(
            self, handler: Callable[[Message, Dict], Awaitable], event: Message, data: Dict
    ):
        if event.from_user.id not in ADMIN_IDS:
            await event.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return #–ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –∞–¥–º–∏–Ω
        return await handler(event, data)

admin_router = Router()

@admin_router.message(F.text=="–∞–¥–º–∏–Ω–∫–∞")
async def go_to_admin(message: Message):  
    await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=kb.main_admin)

TASKS_PER_PAGE = 5 #–ö–æ–ª-–≤–æ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
QUESTIONS_PER_PAGE = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ


@admin_router.message(F.text == "–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è")
@admin_router.callback_query(F.data.startswith("tasks_page:"))
async def tasks_list(callback_or_message):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback
    if isinstance(callback_or_message, Message):
        message = callback_or_message
        is_callback = False
        page = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    else:
        callback = callback_or_message
        message = callback.message
        is_callback = True
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback data
        page = int(callback.data.split(":")[1])
        print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –í—ã–±—Ä–∞–Ω–∞")

    async with aiosqlite.connect("bot.db") as db:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
        async with db.execute(
            "SELECT COUNT(*) FROM tasks_progress WHERE task_link NOT NULL"
        ) as cursor:
            total_tasks = (await cursor.fetchone())[0]

        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        offset = page * TASKS_PER_PAGE
        async with db.execute(
            """
            SELECT 
                t.user_id, 
                u.first_name, 
                u.last_name,
                v.vacancy_name,
                t.task_id,
                t.action_date     
            FROM 
                tasks_progress t
            LEFT JOIN 
                users u ON t.user_id = u.user_id
            LEFT JOIN 
                test_tasks tt ON t.task_id = tt.task_id
            LEFT JOIN 
                vacancies v ON tt.vacancy_id = v.vacancy_id
            WHERE 
                t.task_link IS NOT NULL
            LIMIT ? OFFSET ?
            """,
            (TASKS_PER_PAGE, offset),
        ) as cursor:
            tasks = await cursor.fetchall()

    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç
    if not tasks:
        if is_callback:
            await message.edit_text("–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
            await callback.answer()
        else:
            await message.answer("–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    tasks_kb = InlineKeyboardBuilder()
    for user_id, first_name, last_name, vacancy_name, task_id, action_date in tasks:
        display_name = first_name if first_name else f"ID {user_id}"
        display_lastname = last_name if last_name else ""
        button_text = (
        f"–û—Ç: {display_name} {display_lastname}. " 
        f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy_name}\n"
        )
        callback_data = f"complete_task_info,{user_id},{task_id},{action_date},{page}"  # –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        tasks_kb.button(text=button_text, callback_data=callback_data)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_tasks > (offset + TASKS_PER_PAGE):  
        tasks_kb.button(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"tasks_page:{page + 1}")
    if page > 0:  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø–µ—Ä–≤–∞—è
        tasks_kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tasks_page:{page - 1}")

    tasks_kb.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_callback:
        await message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=tasks_kb.as_markup())
        await callback.answer()
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=tasks_kb.as_markup())



@admin_router.callback_query(F.data.startswith("complete_task_info,"))
async def view_question(callback: CallbackQuery):
    data = callback.data.split(",")
    user_id = data[1]
    task_id = data[2]
    task_date = data[3]
    page = data[4]


    async with aiosqlite.connect("bot.db") as db:
        async with db.execute(
            """
            SELECT
                t.user_id,  
                u.first_name, 
                u.last_name, 
                t.action_date,
                v.vacancy_name,
                tt.task_name,
                t.task_link      
            FROM 
                tasks_progress t
            LEFT JOIN 
                users u ON t.user_id = u.user_id
            LEFT JOIN 
                test_tasks tt ON t.task_id = tt.task_id
            LEFT JOIN 
                vacancies v ON tt.vacancy_id = v.vacancy_id
            WHERE 
                t.task_link IS NOT NULL AND t.user_id = ? AND t.task_id = ? AND t.action_date = ?
            """,
            (user_id, task_id, task_date)
        ) as cursor:
            task_data = await cursor.fetchone()
            print(user_id, task_id, task_date, page)

    if not task_data:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ —Å–∫—Ä—ã—Ç–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    user_id, first_name, last_name, task_date, vacancy_name, task_name, task_link = task_data
    task_date_formatted = datetime.strptime(task_date, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
    display_name = first_name if first_name else f"ID {user_id}"
    display_lastname = last_name if last_name else ""

    message_text = (
        f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ –æ—Ç:</b> {display_name} {display_lastname}\n\n"
        f"<b>–î–∞—Ç–∞:</b> {task_date_formatted}\n\n"
        f"<b>–í–∞–∫–∞–Ω—Å–∏—è:</b> {vacancy_name}\n\n"
        f"<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {task_name}\n\n"
        f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n{task_link}"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    task_kb = InlineKeyboardBuilder()
    task_kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tasks_page:{page}")
    task_kb.adjust(1)

    await callback.message.edit_text(message_text, reply_markup=task_kb.as_markup(), parse_mode="HTML")
    await callback.answer()






@admin_router.message(F.text == "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
@admin_router.callback_query(F.data.startswith("questions:"))
async def questions_list(callback_or_message, page = 0):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback
    if isinstance(callback_or_message, Message):
        message = callback_or_message
        is_callback = False
        page = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    else:
        callback = callback_or_message
        message = callback.message
        is_callback = True
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback data
        page = int(callback.data.split(":")[1])

    async with aiosqlite.connect("bot.db") as db:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        async with db.execute(
            "SELECT COUNT(*) FROM questions WHERE q_type='to admin' AND answered = 0"
        ) as cursor:
            total_questions = (await cursor.fetchone())[0]

        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        offset = page * QUESTIONS_PER_PAGE
        async with db.execute(
            """
            SELECT q.user_id, u.first_name, u.last_name, q.q_date
            FROM questions q 
            LEFT JOIN users u ON q.user_id = u.user_id
            WHERE q.q_type='to admin' AND q.answered = 0
            LIMIT ? OFFSET ?
            """,
            (QUESTIONS_PER_PAGE, offset),
        ) as cursor:
            questions = await cursor.fetchall()

    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç
    if not questions:
        if is_callback:
            await message.edit_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
            await callback.answer()
        else:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    question_kb = InlineKeyboardBuilder()
    for user_id, first_name, last_name, q_date in questions:
        display_name = first_name if first_name else f"ID {user_id}"
        display_lastname = last_name if last_name else ""
        button_text = f"–í–æ–ø—Ä–æ—Å –æ—Ç: {display_name} {display_lastname}"
        callback_data = f"question_text,{user_id},{q_date},{page}"  # –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        question_kb.button(text=button_text, callback_data=callback_data)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if page > 0:  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø–µ—Ä–≤–∞—è
        question_kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"questions:{page - 1}")
    if total_questions > (offset + QUESTIONS_PER_PAGE):  # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä—ë–¥", –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        question_kb.button(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"questions:{page + 1}")

    question_kb.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_callback:
        await message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=question_kb.as_markup())
        await callback.answer()
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=question_kb.as_markup())


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
class AnswerQuestionState(StatesGroup):
    waiting_for_answer = State()

@admin_router.callback_query(F.data.startswith("question_text,"))
async def view_question(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split(",")
    user_id = data[1]
    q_date = data[2]
    page = int(data[3])

    await state.update_data(current_page=page)


    async with aiosqlite.connect("bot.db") as db:
        async with db.execute(
            """
            SELECT q.question, q.q_date, u.first_name, u.last_name 
            FROM questions q
            LEFT JOIN users u ON q.user_id = u.user_id
            WHERE q.user_id = ? AND q.q_type = 'to admin' AND q.answered = 0 AND q.q_date = ?
            """,
            (user_id, q_date)
        ) as cursor:
            question_data = await cursor.fetchone()

    if not question_data:
        await callback.answer("–í–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    question_text, question_date, first_name, last_name = question_data
    question_date_formatted = datetime.strptime(question_date, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
    display_name = first_name if first_name else f"ID {user_id}"
    display_lastname = last_name if last_name else ""

    message_text = (
        f"üìù <b>–í–æ–ø—Ä–æ—Å –æ—Ç:</b> {display_name} {display_lastname}\n"
        f"<b>–î–∞—Ç–∞:</b> {question_date_formatted}\n\n"
        f"<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>\n{question_text}"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    question_kb = InlineKeyboardBuilder()
    question_kb.button(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", callback_data=f"answer_question,{user_id},{q_date}")
    question_kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"questions:{page}")
    question_kb.adjust(1)

    await callback.message.edit_text(message_text, reply_markup=question_kb.as_markup(), parse_mode="HTML")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å"
@admin_router.callback_query(F.data.startswith("answer_question,"))
async def answer_question(callback: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback data
    data = callback.data.split(",")
    user_id = data[1]
    q_date = data[2]
    async with aiosqlite.connect("bot.db") as db:
        async with db.execute(
            """
            SELECT q.question
            FROM questions q
            WHERE q.user_id = ? AND q.q_type = 'to admin' AND q.answered = 0 AND q.q_date = ?
            """,
            (user_id, q_date)
        ) as cursor:
            question_data = await cursor.fetchone()
    
    
    if question_data:
        question_text = question_data[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    else:
        question_text = None

    if question_text is None:
        await callback.message.edit_text("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω.")
        await callback.answer()
        return
    

    print(question_text)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(answer_user_id=user_id, answer_question_text=question_text)

    await callback.message.edit_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel."
    )
    await state.set_state(AnswerQuestionState.waiting_for_answer)
    await callback.answer()

@admin_router.message(AnswerQuestionState.waiting_for_answer)
async def process_answer(message: Message, state: FSMContext, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    data = await state.get_data()
    user_id = data["answer_user_id"]
    question_text = data["answer_question_text"]
    answer_text = message.text

    if answer_text.lower() == "/cancel":
        await state.clear()
        await message.answer("–í–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω.")
        return

    async with aiosqlite.connect("bot.db") as db:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É questions
        await db.execute(
            """
            UPDATE questions
            SET a_date = CURRENT_TIMESTAMP, answered = 1
            WHERE user_id = ? AND question = ? AND q_type = 'to admin' AND answered = 0
            """,
            (user_id, question_text),
        )
        await db.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            chat_id=user_id,
            text=(
                "–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω.\n\n"
                f"–í–∞—à –≤–æ–ø—Ä–æ—Å: {question_text}\n\n"
                f"–û—Ç–≤–µ—Ç: {answer_text}"
            ),
        )
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    page = data.get("current_page", 0) 

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
    await questions_list(message, page) 

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
    await state.clear()



@admin_router.callback_query(F.data.startswith("questions:"))
async def back_to_questions(callback: CallbackQuery):
    page = int(callback.data.split(":")[3])
    await questions_list(callback, page)  # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é questions_list








@admin_router.callback_query(F.data == "back_to_vacancies")
@admin_router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π")
async def vacancies_list(callback_or_message):

    if isinstance(callback_or_message, Message):
        message = callback_or_message
        is_callback = False
    else:
        callback = callback_or_message
        message = callback.message
        is_callback = True

    async with aiosqlite.connect("bot.db") as db:
        async with db.execute("SELECT vacancy_id, vacancy_name FROM vacancies") as cursor:
            vacancies = await cursor.fetchall()


    if not vacancies:
        if is_callback:
            await message.edit_text("–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.")
        else:
            await message.answer("–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.")   
        return
    

    vacancies_kb = InlineKeyboardBuilder()
    for vacancy_id, vacancy_name in vacancies:
        button_text = f"{vacancy_name or 'No vacancie'} "
        callback_data = f"delete_vacancy:{vacancy_id}"
        vacancies_kb.button(text=button_text, callback_data=callback_data)
    vacancies_kb.button(text="‚úî–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="add_vacancy")
    vacancies_kb.adjust(1)

    if is_callback:
        await message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=vacancies_kb.as_markup())
        await callback.answer()
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=vacancies_kb.as_markup())
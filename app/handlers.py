from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import aiosqlite

import app.keyboard as kb
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ResumeStates(StatesGroup):
    waiting_for_resume_link = State()
    waiting_for_portfolio_link = State()

class QuestionStates(StatesGroup):
    waiting_for_question_to_bot = State()
    waiting_for_question_to_admin = State()


# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
@router.callback_query(StateFilter(ResumeStates.waiting_for_resume_link))
async def block_buttons_during_state(callback: CallbackQuery):
    await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–∫–∏.", show_alert=True)
@router.callback_query(StateFilter(ResumeStates.waiting_for_portfolio_link))
async def block_buttons_during_state(callback: CallbackQuery):
    await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–∫–∏.", show_alert=True)


# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
@router.callback_query(StateFilter(QuestionStates.waiting_for_question_to_bot))
async def block_buttons_during_state(callback: CallbackQuery):
    await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", show_alert=True)
@router.callback_query(StateFilter(QuestionStates.waiting_for_question_to_admin))
async def block_buttons_during_state(callback: CallbackQuery):
    await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", show_alert=True)


# –°–±–æ—Ä —Å–≤–µ–¥–µ–Ω–∏–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@router.message(CommandStart())
async def cmd_start(message: Message):

    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name or ""

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect("bot.db") as db:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor = await db.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user_exists = await cursor.fetchone()
        
        if user_exists:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.execute(
                "INSERT INTO users (user_id, first_name, last_name) VALUES (?, ?, ?)",
                (user_id, first_name, last_name),
            )
            await db.commit()
            print(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, {first_name} {last_name}")

    
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!", reply_markup=kb.main)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
@router.message(F.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def catalog(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å? (–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã)", reply_markup=kb.question)
    
@router.callback_query(F.data == "q_to_bot")
async def resume(callback: CallbackQuery, state: FSMContext):

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –±–æ—Ç—É
    await state.set_state(QuestionStates.waiting_for_question_to_bot)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
    await callback.answer()

@router.callback_query(F.data == "q_to_admin")
async def resume(callback: CallbackQuery, state: FSMContext):

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω—É
    await state.set_state(QuestionStates.waiting_for_question_to_admin)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –±–æ—Ç—É
@router.message(StateFilter(QuestionStates.waiting_for_question_to_bot))
async def get_q_to_bot(message: Message, state: FSMContext):
    user_id = message.from_user.id
    q = message.text  
    print(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç {user_id}: {q}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect("bot.db") as db:
        await db.execute(
            "INSERT INTO questions (user_id, question, q_type, q_date) VALUES (?, ?, ?, CURRENT_TIMESTAMP)",
            (user_id, q, "to bot")
        )
        await db.commit()

    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω. –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
@router.message(StateFilter(QuestionStates.waiting_for_question_to_admin))
async def get_q_to_bot(message: Message, state: FSMContext):
    user_id = message.from_user.id
    q = message.text  
    print(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç {user_id}: {q}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect("bot.db") as db:
        await db.execute(
            "INSERT INTO questions (user_id, question, q_type, q_date) VALUES (?, ?, ?, CURRENT_TIMESTAMP)",
            (user_id, q, "to admin")
        )
        await db.commit()

    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω. –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π")
async def vacancies_list(message: Message):
    async with aiosqlite.connect("bot.db") as db:
        async with db.execute("SELECT vacancy_id, vacancy_name FROM vacancies") as cursor:
            vacancies = await cursor.fetchall()


    if not vacancies:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
        return
    

    vacancies_kb = InlineKeyboardBuilder()
    for vacancy_id, vacancy_name in vacancies:
        button_text = f"{vacancy_name or "No vacancie"} "
        callback_data = f"vacancy:{vacancy_id}"
        vacancies_kb.button(text=button_text, callback_data=callback_data)
    vacancies_kb.adjust(1)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:", reply_markup=vacancies_kb.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
@router.callback_query(lambda c: c.data.startswith("vacancy:"))
async def vacancy_info_callback(callback: CallbackQuery):
    vacancy_id = callback.data.split(":")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∞–∫–∞–Ω—Å–∏–∏
    async with aiosqlite.connect("bot.db") as db:

        async with db.execute("SELECT vacancy_name, vacancy_description FROM vacancies WHERE vacancy_id = ?", (vacancy_id)) as cursor:
            vacancy = await cursor.fetchone()
        
        async with db.execute("SELECT task_id, task_name FROM test_tasks WHERE vacancy_id=?", (vacancy_id)) as cursor:
            test_tasks = await cursor.fetchall()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–∫–∞–Ω—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞
    if not vacancy:
        await callback.message.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return
    

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    vacancy_name, vacancy_description = vacancy
    message_text = f"üìå {vacancy_name}\n\n{vacancy_description}\n\n"


    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    if test_tasks:
        message_text += "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n"
        test_tasks_kb = InlineKeyboardBuilder()
        for task_id, task_name in test_tasks:
            task_button_text = task_name[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            test_tasks_kb.button(text=task_button_text, callback_data=f"task:{task_id}")
        test_tasks_kb.adjust(1)
        await callback.message.answer(message_text, reply_markup=test_tasks_kb.as_markup())
    else:
        message_text += "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π."
        await callback.message.answer(message_text)
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ




# –í—ã–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ" –∏ "–°–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
@router.callback_query(lambda c: c.data.startswith("task:"))
async def task_description_callback(callback: CallbackQuery):
    task_id = callback.data.split(":")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    user_id = callback.from_user.id

    async with aiosqlite.connect("bot.db") as db:
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        async with db.execute(
            "SELECT task_name, task_description FROM test_tasks WHERE task_id = ?", 
            (task_id,)
        ) as cursor:
            task = await cursor.fetchone()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.execute(
            "SELECT action_type FROM tasks_progress WHERE user_id = ? AND task_id = ? ORDER BY action_date DESC LIMIT 1",
            (user_id, task_id)
        ) as cursor:
            task_status = await cursor.fetchone()

    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if not task:
        await callback.message.answer("–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return

    task_name, task_description = task

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏—è
    message_text = f"üìã <b>{task_name}</b>\n\n{task_description}\n"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    task_kb = InlineKeyboardBuilder()

    if not task_status or task_status[0] == "—Å–¥–∞–ª":  # –ó–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –≤–∑—è—Ç–æ –∏–ª–∏ —É–∂–µ —Å–¥–∞–Ω–æ
        task_kb.button(text="–í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"take_task:{task_id}")
    elif task_status[0] == "–≤–∑—è–ª":  # –ó–∞–¥–∞–Ω–∏–µ –≤–∑—è—Ç–æ
        task_kb.button(text="–°–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"submit_task:{task_id}")

    task_kb.adjust(1)

    await callback.message.answer(message_text, reply_markup=task_kb.as_markup(), parse_mode="HTML")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
@router.callback_query(lambda c: c.data.startswith("take_task:"))
async def take_task_callback(callback: CallbackQuery):
    task_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    action_type = "–≤–∑—è–ª"

    async with aiosqlite.connect("bot.db") as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
        async with db.execute(
            "SELECT action_type FROM tasks_progress WHERE user_id = ? AND task_id = ? ORDER BY action_date DESC LIMIT 1",
            (user_id, task_id)
        ) as cursor:
            task_status = await cursor.fetchone()

        if task_status and task_status[0] == "–≤–∑—è–ª":
            await callback.message.answer("–í—ã —É–∂–µ –≤–∑—è–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.", parse_mode="HTML")
            await callback.answer()
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤–∑—è—Ç–∏–∏ –∑–∞–¥–∞–Ω–∏—è
        await db.execute(
            "INSERT INTO tasks_progress (user_id, task_id, action_type, action_date) VALUES (?, ?, ?, CURRENT_TIMESTAMP)",
            (user_id, task_id, action_type)
        )
        await db.commit()

    await callback.message.answer("–í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ. –£–¥–∞—á–∏!", parse_mode="HTML")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
@router.callback_query(lambda c: c.data.startswith("submit_task:"))
async def submit_task_callback(callback: CallbackQuery):
    task_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    action_type = "—Å–¥–∞–ª"

    async with aiosqlite.connect("bot.db") as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–¥–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
        async with db.execute(
            "SELECT action_type FROM tasks_progress WHERE user_id = ? AND task_id = ? ORDER BY action_date DESC LIMIT 1",
            (user_id, task_id)
        ) as cursor:
            task_status = await cursor.fetchone()

        if task_status and task_status[0] == "—Å–¥–∞–ª":
            await callback.message.answer("–í—ã —É–∂–µ —Å–¥–∞–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!", parse_mode="HTML")
            await callback.answer()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∑—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
        if not task_status or task_status[0] != "–≤–∑—è–ª":
            await callback.message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –≤–∑—è–ª–∏.", parse_mode="HTML")
            await callback.answer()
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–¥–∞—á–µ –∑–∞–¥–∞–Ω–∏—è
        await db.execute(
            "INSERT INTO tasks_progress (user_id, task_id, action_type, action_date) VALUES (?, ?, ?, CURRENT_TIMESTAMP)",
            (user_id, task_id, action_type)
        )
        await db.commit()

    await callback.message.answer("–í—ã —Å–¥–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!", parse_mode="HTML")
    await callback.answer()






# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤
@router.message(F.text == "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤")
async def contest_list(message: Message):
    async with aiosqlite.connect("bot.db") as db:
        async with db.execute("SELECT contest_id, contest_name FROM contests") as cursor:
            contests = await cursor.fetchall()


    if not contests:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤.")
        return
    

    contests_kb = InlineKeyboardBuilder()
    for contest_id, contest_name in contests:
        button_text = f"{contest_name or "No contest"} "
        callback_data = f"contest:{contest_id}"
        contests_kb.button(text=button_text, callback_data=callback_data)
    contests_kb.adjust(1)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—É—Ä—Å:", reply_markup=contests_kb.as_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å—ã
@router.callback_query(lambda c: c.data.startswith("contest:"))
async def contest_info_callback(callback: CallbackQuery):
    contest_id = callback.data.split(":")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–Ω–∫—É—Ä—Å–∞
    async with aiosqlite.connect("bot.db") as db:

        async with db.execute("SELECT contest_name, contest_description FROM contests WHERE contest_id = ?", (contest_id)) as cursor:
            contest = await cursor.fetchone()
        

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–∫—É—Ä—Å –Ω–∞–π–¥–µ–Ω
    if not contest:
        await callback.message.answer("–ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_name, contest_description = contest
    message_text = f"üñ•Ô∏è {contest_name}\n\n{contest_description}\n\n"


    # –í—ã–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞
    await callback.message.answer(message_text)
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ






# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ"
@router.message(F.text == "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ")
async def about_myself(message: Message):
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ –∏–ª–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.\n"
                         "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", reply_markup=kb.about_myself)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ"
@router.callback_query(F.data == "resume")
async def resume(callback: CallbackQuery, state: FSMContext):

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–∑—é–º–µ
    await state.set_state(ResumeStates.waiting_for_resume_link)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ —Ä–µ–∑—é–º–µ:")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"
@router.callback_query(F.data == "portfolio")
async def portfolio(callback: CallbackQuery, state: FSMContext):

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    await state.set_state(ResumeStates.waiting_for_portfolio_link)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:")
    await callback.answer()





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–∑—é–º–µ
@router.message(StateFilter(ResumeStates.waiting_for_resume_link))
async def get_resume_link(message: Message, state: FSMContext):
    user_id = message.from_user.id
    resume_link = message.text  # –°—Å—ã–ª–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {resume_link}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–æ–π
    if not resume_link.startswith("http"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """async with aiosqlite.connect("bot.db") as db:
        await db.execute(
            "INSERT INTO resumes (user_id, resume_link) VALUES (?, ?)",
            (user_id, resume_link)
        )
        await db.commit()"""
    async with aiosqlite.connect("bot.db") as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Å—ã–ª–∫–∏ –¥–æ —ç—Ç–æ–≥–æ
        async with db.execute(
            "SELECT user_id FROM resumes WHERE user_id = ?",
            (user_id,)
        ) as cursor:
            user_found = await cursor.fetchone()

        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        if not user_found:
            await db.execute(
                "INSERT INTO resumes (user_id, resume_link) VALUES (?, ?)",
                (user_id, resume_link)
            )
        # –ï—Å–ª–∏ –¥–∞, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        else:
            await db.execute(
                "UPDATE resumes SET resume_link = ? WHERE user_id = ?",
                (resume_link, user_id)
            )
        await db.commit()

    await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
@router.message(StateFilter(ResumeStates.waiting_for_portfolio_link))
async def get_portfolio_link(message: Message, state: FSMContext):
    user_id = message.from_user.id
    portfolio_link = message.text  # –°—Å—ã–ª–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–æ–π
    if not portfolio_link.startswith("http"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect("bot.db") as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Å—ã–ª–∫–∏ –¥–æ —ç—Ç–æ–≥–æ
        async with db.execute(
            "SELECT user_id FROM resumes WHERE user_id = ?",
            (user_id,)
        ) as cursor:
            user_found = await cursor.fetchone()

        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        if not user_found:
            await db.execute(
                "INSERT INTO resumes (user_id, portfolio_link) VALUES (?, ?)",
                (user_id, portfolio_link)
            )
        # –ï—Å–ª–∏ –¥–∞, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        else:
            await db.execute(
                "UPDATE resumes SET portfolio_link = ? WHERE user_id = ?",
                (portfolio_link, user_id)
            )
        await db.commit()

    await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

